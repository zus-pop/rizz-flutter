import 'dart:convert';
import 'package:firebase_ai/firebase_ai.dart';
import 'package:flutter/material.dart';

class AIMessageService {
  late final GenerativeModel _model;

  AIMessageService() {
    _initializeAI();
  }

  void _initializeAI() {
    final jsonSchema = Schema.object(
      properties: {
        'suggestions': Schema.array(
          items: Schema.string(
            description:
                'M·ªôt g·ª£i √Ω tin nh·∫Øn h·∫•p d·∫´n, vui nh·ªôn v√† ph√π h·ª£p v·ªõi t√¨nh hu·ªëng tr√≤ chuy·ªán',
          ),
        ),
        'context': Schema.string(
          description: 'Ng·ªØ c·∫£nh ho·∫∑c ch·ªß ƒë·ªÅ c·ªßa c√°c g·ª£i √Ω tin nh·∫Øn',
        ),
      },
    );

    _model = FirebaseAI.vertexAI(location: 'global').generativeModel(
      model: 'gemini-2.5-flash',
      generationConfig: GenerationConfig(
        responseMimeType: 'application/json',
        responseSchema: jsonSchema,
      ),
    );
  }

  /// Generate message suggestions based on conversation context
  Future<Map<String, dynamic>?> generateMessageSuggestions({
    required List<Map<String, dynamic>> recentMessages,
    required String otherUserName,
    String? otherUserBio,
    List<String>? otherUserInterests,
    int maxSuggestions = 3,
  }) async {
    try {
      debugPrint('ü§ñ Generating AI message suggestions...');

      // Build conversation context
      final conversationContext = _buildConversationContext(
        recentMessages: recentMessages,
        otherUserName: otherUserName,
        otherUserBio: otherUserBio,
        otherUserInterests: otherUserInterests,
      );

      final prompt =
          '''
D·ª±a tr√™n ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán sau, h√£y t·∫°o $maxSuggestions g·ª£i √Ω tin nh·∫Øn h·∫•p d·∫´n, vui nh·ªôn v√† ph√π h·ª£p.

Y√äU C·∫¶U:
- Tin nh·∫Øn ph·∫£i t·ª± nhi√™n, th√¢n thi·ªán v√† thu h√∫t
- S·ª≠ d·ª•ng ng√¥n ng·ªØ ti·∫øng Vi·ªát ph√π h·ª£p v·ªõi gi·ªõi tr·∫ª
- Tr√°nh c√°c c√¢u h·ªèi qu√° x√¢m ph·∫°m ho·∫∑c nh·∫°y c·∫£m
- T·∫≠p trung v√†o vi·ªác t·∫°o s·ª± k·∫øt n·ªëi v√† t∆∞∆°ng t√°c t√≠ch c·ª±c
- M·ªói g·ª£i √Ω n√™n d∆∞·ªõi 100 k√Ω t·ª±
- Ph√π h·ª£p v·ªõi phong c√°ch tr√≤ chuy·ªán hi·ªán t·∫°i

NG·ªÆ C·∫¢NH CU·ªòC TR√í CHUY·ªÜN:
$conversationContext

H√£y tr·∫£ v·ªÅ JSON v·ªõi format:
{
  "suggestions": ["G·ª£i √Ω 1", "G·ª£i √Ω 2", "G·ª£i √Ω 3"],
  "context": "M√¥ t·∫£ ng·∫Øn v·ªÅ ch·ªß ƒë·ªÅ cu·ªôc tr√≤ chuy·ªán"
}
''';

      final response = await _model.generateContent([Content.text(prompt)]);

      debugPrint('ü§ñ AI Response: ${response.text}');

      if (response.text != null) {
        final jsonResponse = jsonDecode(response.text!);
        return jsonResponse;
      } else {
        throw Exception('Empty response from AI');
      }
    } catch (e) {
      debugPrint('‚ùå Error generating AI suggestions: $e');
      return null;
    }
  }

  /// Build conversation context from recent messages
  String _buildConversationContext({
    required List<Map<String, dynamic>> recentMessages,
    required String otherUserName,
    String? otherUserBio,
    List<String>? otherUserInterests,
  }) {
    final buffer = StringBuffer();

    // Add user info
    buffer.writeln('ƒê·ªëi ph∆∞∆°ng: $otherUserName');
    if (otherUserBio != null && otherUserBio.isNotEmpty) {
      buffer.writeln('Th√¥ng tin v·ªÅ $otherUserName: $otherUserBio');
    }
    if (otherUserInterests != null && otherUserInterests.isNotEmpty) {
      buffer.writeln('S·ªü th√≠ch: ${otherUserInterests.join(", ")}');
    }

    buffer.writeln('\nL·ªãch s·ª≠ tin nh·∫Øn g·∫ßn ƒë√¢y (t·ªëi ƒëa 10 tin):');

    // Add recent messages (limit to last 10)
    final messagesToShow = recentMessages.take(10);
    for (final message in messagesToShow) {
      final sender = message['isMe'] == true ? 'B·∫°n' : otherUserName;
      final text = message['text'] ?? '';
      buffer.writeln('$sender: $text');
    }

    // Add conversation analysis
    final lastMessage = recentMessages.isNotEmpty ? recentMessages.last : null;
    if (lastMessage != null) {
      final isLastMessageFromMe = lastMessage['isMe'] == true;
      if (isLastMessageFromMe) {
        buffer.writeln('\nT√¨nh hu·ªëng: ƒêang ch·ªù ph·∫£n h·ªìi t·ª´ $otherUserName');
      } else {
        buffer.writeln(
          '\nT√¨nh hu·ªëng: V·ª´a nh·∫≠n tin nh·∫Øn t·ª´ $otherUserName, c·∫ßn tr·∫£ l·ªùi',
        );
      }
    } else {
      buffer.writeln('\nT√¨nh hu·ªëng: B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán m·ªõi');
    }

    return buffer.toString();
  }

  /// Get predefined fallback suggestions for when AI fails
  List<String> getFallbackSuggestions(String otherUserName) {
    return [
      'Ch√†o $otherUserName! R·∫•t vui ƒë∆∞·ª£c l√†m quen üòä',
      'B·∫°n ƒëang l√†m g√¨ v·∫≠y? K·ªÉ nghe v·ªõi ƒëi!',
      'H√¥m nay c·ªßa b·∫°n th·∫ø n√†o? C√≥ k·∫ø ho·∫°ch g√¨ th√∫ v·ªã kh√¥ng?',
      'Ch√∫ng ta c√≥ ƒëi·ªÉm chung g√¨ kh√¥ng nh·ªâ? üòÑ',
    ];
  }
}
